#+AUTHOR: BuddhiLW and JP
#+PROPERTY: header-args:js :tangle ./code/js/quizz-game.js :mkdirp yes

* Project Buzz Quizz
 By Jota and BuddhiLW

** About the Buzz Quizz folder-structure

In =code= we find our code-base. And, in =resources= we store images, icons, fonts etc used in the project.
#+begin_src shell
  .
  |-- code
  |   |-- css
  |   |-- html
  |   `-- js
  `-- resources
#+end_src

** Layout 1
Worked out in conjunction.

*** JS
#+begin_src js :tangle ./code/js/main-page.js 
  let initPage = () => allQuizzes(quizzApi)(10);

  let allQuizzes = api => number =>
      {let quizz = axios.get(api);
       let captureQuizzes = captureQuizzIds(number);
       quizz.then(captureQuizzes);
       quizz.catch(errorHandle);
      };
  var captureQuizzIds = number => quizz =>{
      handleQuizzesDatas(number)(quizz);
  };

  let handleQuizzesDatas = number => quizzesData => populateAvalible(quizzesData)(number);
  var populateAvalible = quizzesData => number => {
      let listOfTemplates = fetchData(quizzesData)(number);
      let quizzesDiv = querier('.quizzes');
      listOfTemplates.forEach(template => populateWith(quizzesDiv)(template));
      const quizzesClickable = querierAll('.quizz');
      const createButton = querier('div.first-quizz-box button');
      activateQuizzListeners(quizzesClickable);
      activateCreateListeners(createButton);
  };

  let activateQuizzListeners = atomicQuizzDOM => {
      atomicQuizzDOM.forEach((card) => {
          card.addEventListener("click", apiRender);
      });
  };

  let deactivateQuizzListeners = atomicQuizzDOM => {
      atomicQuizzDOM.forEach((card) => {
          card.removeEventListener("click", apiRender);
      });
  };

  function apiRender(e) {
      var allQuizzesRendered = Array.from(querierAll('.quizz'));
      var allQuizzesId = idArray(allQuizzesRendered);
      var cardServerId = allQuizzesId.indexOf(`${this.id}`);
      const children = Array.from(this.parentElement.children);
      children.forEach((card) => toggleOpacity(card));
      handleQuizz(quizzApi)(cardServerId);
      untoggleOpacity(this);
      deactivateListeners(children);
      setTimeout(scrollToQuizz, 2000);
  };
  var id = e => e.id;
  var idArray = listElements => listElements.map(id);

  let activateCreateListeners = atomicQuizzDOM => {
          atomicQuizzDOM.addEventListener("click", createInterface);
  };

  let deactivateCreateListeners = atomicQuizzDOM => {
      atomicQuizzDOM.removeEventListener("click", createInterface);
  };

  function createInterface(e) {
      var startLayout = querier('div.quizz-creation-screen');
      untoggleOpacityCreate(startLayout);
      deactivateCreateListeners(startLayout);
      setTimeout(scrollToCreate, 2000, startLayout);
  };
  var scrollToCreate = (create) => {
      scroll(create);
  };

  let toggleOpacityCreate = card => {
      if (lastNode(card) !== null) {
          addClass(card)("hidden");
      }
  };

  let untoggleOpacityCreate = (e) => {
      removeClass(e)("hidden");
  };

  var scrollToQuizz = () => {
      const closestUl = querier('div.quizz-logo');
      console.log(querier('div.quizz-logo'));
      scroll(closestUl);
  };

  var fetchData = quizzesData => number =>{
      let fetchedData = [];
      let dataList = [];
      quizzesData.data.forEach((quizz,i) => ((i<=number) ?
                                             dataList.push(quizz) :
                                             dataList));
      dataList.forEach(dataObj => createTemplateIndex(dataObj)(fetchedData));
      return fetchedData;
  };

  var createTemplateIndex = obj => emptyList =>
      {let title = createTitleIndex(obj)('quizz');
       emptyList.push(title);
      };

  var createTitleIndex = obj => titleClass => {
      console.log(obj.id);
      let div = createClassElement('div')(titleClass);
      assignId(div)(obj.id);
      let div2 = createClassElement('div')('quizz-image');
      let div3 = createContentClassElement('div')(obj.title)('quizz-description');
      changeBackground(div2)(obj.image);
      populateWith(div2)(div3);
      populateWith(div)(div2);
      return div;
  };

  initPage();
#+end_src

*** HTML
**** Clickable Quizzes
General layout of a quizz in the main menu.
#+begin_src html
  <div class="quizz">
    <div class="quizz-image">
      <div class="quizz-description">Teste: testando se a imagem fica com fundo degrade</div>
    </div>
  </div>
#+end_src
** Layout 2 
LW
*** JS
**** DONE Common functions (query, queryAll, listen);
CLOSED: [2021-04-20 Tue 22:13]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:13]
:END:
Here we define these in a functional way, and give an example code.
#+begin_src js
  let querier = c => document.querySelector(c);
  let querierAll = c => document.querySelectorAll(c);
  let querierElement = e => c => e.querySelector(c);
  let listen = element => event => f => element.addEventListener(event, f);

  let hello = () => console.log("Hello, I'm listening");

  var images = querierAll("div.quizz.screen2#q1 div.img"); //=> element
  // listen(images[1])("click")(hello);
#+end_src
***** DONE Some cryptography constants
CLOSED: [2021-04-23 Fri 22:02]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-23 Fri 22:02]
:END:
#+begin_src js
var fruitList = ["banana","apple","kiwi"];
var moreFruitsList = ["pineapple","orange","watermelon"];
#+end_src
**** DONE Populate with atomic-quizzes
CLOSED: [2021-04-22 Thu 14:07]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 14:07]
:END:
***** DONE Handle the Quizz api
CLOSED: [2021-04-21 Wed 22:12]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 22:12]
:END:
#+begin_src js 
  const quizzApi = "https://mock-api.bootcamp.respondeai.com.br/api/v2/buzzquizz/quizzes/";
  let handleQuizz = api => id =>
      {let quizz = axios.get(api);
       let showQuizz = showQuizzId(id); 
       quizz.then(showQuizz);
       quizz.catch(errorHandle);
      };

  handleQuizz(quizzApi);
  var errorHandle = quizz => console.log(quizz);
#+end_src
***** DONE Manage the data of a single quizz
CLOSED: [2021-04-22 Thu 15:59]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 15:59]
:END:
#+begin_src js 
  var showQuizzId = (id) => (quizz) =>{
      handleQuizzData(id)(quizz);
  };
  let handleQuizzData = id => data => populate(data)(id); 
#+end_src
***** DONE Populate function reciving worked out data
CLOSED: [2021-04-22 Thu 18:20]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 18:20]
:END:
****** DONE Helper Functions
CLOSED: [2021-04-21 Wed 22:12]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 22:12]
:END:
#+begin_src js 
  let createMsg = message => document.createTextNode(message);
  let appendMsgNode = e => nodeMessage => e.appendChild(nodeMessage);  
  let createElement = e => document.createElement(e);
  let assignId = e => identity => e.id = `${identity}`;
  let assignClass = e => c => e.classList.add(c);
  var tupleObj = obj => Object.entries(obj);
  var takeDataId = obj => id => obj.data[id];
  var takeDataIdServer = obj => id => obj.data.id;
  var changeColor = obj => colorValue => {return obj.style.color = colorValue;};
  var changeBackground = obj => url =>
      {return obj.style.backgroundImage = `url(${url})`;};
  // var populateWith = (e) => (c) => (typeof(c)=== "object" ?
  // 				  c.forEach(a => e.appendChild(a.cloneNode(true))) :
  //                                   e.appendChild(c.cloneNode(true)));
  var populateWith = (e) => (c) => e.appendChild(c.cloneNode(true));

#+end_src

****** DONE Quizz ul, where we will append lis
CLOSED: [2021-04-21 Wed 22:12]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 22:12]
:END:
#+begin_src js
  var quizz = querier('.quizzes ul'); 
#+end_src

****** DONE dataFromApiId(inspect api requests and automate it)
CLOSED: [2021-04-22 Thu 15:40]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 15:40]
:END:
#+begin_src js
  // id (number), title(string), image (main),
  //question (object) => atomic-quizz(title,color anwser), levels  
  let dataFromApiId = bruteAllQuizzes => id => {
      newList = [];
      let dataObj = takeDataId(bruteAllQuizzes)(id);
      console.log(dataObj);
      createTemplate(dataObj)(newList);
      return newList;
  };
#+end_src

****** DONE Use dataObj from api, and make a usable format for populating the html.
CLOSED: [2021-04-22 Thu 18:19]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 18:19]
- State "DONE"       from "NEXT"       [2021-04-22 Thu 15:40]
:END:
#+begin_src js
  //id [text, number], title[text, title-text], image [text, []],
  //questions [text, [...]]=> atomic-quizzes:{answers,color, title} => answers: [{image, isCorrectAnswer, text-title}],
  //levels
  var createTemplate = obj => emptyList =>
      {let title = createTitle(obj)('quizz-logo');
       emptyList.push(title);
       let container = createQuizzes(obj)('quizzes');
       emptyList.push(container);
       let quizz = createQuizz(obj);
       emptyList.push(quizz);
       let score = createScore(obj)('score');
       emptyList.push(score);
      };
 #+end_src

******* DONE Template the main header (quizz-title and background image)
CLOSED: [2021-04-22 Thu 18:19]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 18:19]
:END:
#+begin_src js
  var createTitle = obj => titleClass => {
      let div = createClassElement('div')(titleClass);
      let h1 = createContentElement('h1')(obj.title);
      populateWith(div)(h1);
      changeBackground(div)(obj.image);
      return div;
  };
 #+end_src

******* DONE Template for the container of atomic-quizzes
CLOSED: [2021-04-22 Thu 18:19]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 18:19]
:END:
#+begin_src js
  var createQuizzes = obj => titleClass => {
      let div = createClassElement('div')(titleClass);
      addClass(div)('screen2');
      let ul = createElement('ul');
      populateWith(div)(ul);
      return div;
  };

  var createQuizzTitle = question => li => {
      let h1 = createContentElement('h1')(question.title);
      changeColor(h1)(question.color);
      populateWith(li)(h1);	
  };

  var createBodyContainer = question => li => i =>{
      let div = createClassElement('div')('quizz');
      addClass(div)('screen2');
      assignId(div)(`atomic-quizz${i}`);
      createImageContainer(question)(div)(i);
      populateWith(li)(div);
  };

  var random = max => Math.floor((Math.random() * max));
  var populateImages = container => anwser => {
      let div = createClassElement('div')('img');
      (anwser.isCorretAnswer === "true" ?
       assignId(div)(fruitList[random(3)]) :
       assignId(div)(moreFruitsList[random(3)]));
      let img = createImg(anwser.image);
      let h2 = createContentElement('h2')(anwser.text);
      populateWith(div)(img);
      populateWith(div)(h2);
      populateWith(container)(div);
  };
#+end_src

******* DONE Template for the Atomic-quizz 
CLOSED: [2021-04-22 Thu 18:19]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 18:19]
:END:
#+begin_src js
  var createQuizz = obj => {
      let newList = [];
      obj.questions.forEach((q, i) =>{
          let li = createElement('li');
          createQuizzTitle(q)(li);
          createBodyContainer(q)(li)(i);
          newList.push(li);
      });
      return newList;
  };

  let createImageContainer = q => container => i => {
      let newList=[];
      q.answers.forEach(a =>{
          populateImages(container)(a);
          newList.push(container);
      });
      return newList;
  };
#+end_src

******* DONE Template for the Score Page
CLOSED: [2021-04-22 Thu 18:19]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 18:19]
:END:
#+begin_src js
  var createScore = obj => titleClass => {
      let newList = [];

      obj.levels.forEach((l,i) =>{
          let div = createClassElement('div')(titleClass);
          let h1 = createContentElement('h1')(l.title);
          addClass(div)('hidde-page');
          assignId(div)(`level${i}`);
          assignId(div)(l.minValue);
          populateWith(div)(h1);

          let div2 = createClassElement('div')(`result${i}`);
          addClass(div2)('screen2');
          addClass(div2)('quizz');
          populateImagesScore(div2)(l);
          populateWith(div)(div2);

          let button1 = createContentClassElement('button')('Restart Quizz')('restart');
          let button2 = createContentClassElement('button')('Return Home')('home');
          let div3 = createClassElement('div')('buttons');
          populateWith(div3)(button1);
          populateWith(div3)(button2);
          populateWith(div)(div3);

          newList.push(div);
      });
      return newList;
  };

  var populateImagesScore = container => anwser => {
      let div = createClassElement('div')('img');
      let img = createImg(anwser.image);
      let div2 = createClassElement('div')('img');
      let h2 = createContentElement('h2')(anwser.text);
      populateWith(div)(img);
      populateWith(div2)(h2);
      populateWith(div)(div2);
      populateWith(container)(div);
  };

#+end_src

****** DONE Create any element with class and content
CLOSED: [2021-04-21 Wed 17:21]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 17:21]
:END:
+ =createContentClassElement= recives  =elementType=, =content=, and =c= (class) and returns the DOM element with these.
#+begin_src js
  var createContentElement = elementType => content =>
      {let element = createElement(elementType);
       populateNode(element)(content);
       return element;
      };
  var createContentClassElement = elementType => content => c =>
      {let element = createContentElement(elementType)(content);
       assignClass(element)(c);
       return element;
      };
  var createClassElement = e => c => {
      let element = createElement(e);
      addClass(element)(c);
      return element;
  };
  let createContentClass = c => content =>
      {let span = spanNodeClass(c);
       populateNode(span)(content);
       return span;
      };
  let populateNode = node => content => appendMsgNode(node)(createMsg(content));
#+end_src
****** DONE Create img with url
CLOSED: [2021-04-21 Wed 17:21]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 17:21]
:END:
#+begin_src js
let imgUrl = img => url => img.src = url;
let createImg = url =>
    {let imgElement = createElement('img');
     imgUrl(imgElement)(url);
     return imgElement;
    };
#+end_src

****** DONE Populate
CLOSED: [2021-04-22 Thu 18:18]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 18:18]
:END:
#+begin_src js
  let body = querier('body');
  const compareLi = createElement('li');
  var populate = obj => id =>
      {let listTemplating = dataFromApiId(obj)(id);
       console.log(listTemplating);
       listTemplating.forEach(e =>
           (Array.isArray(e) ?
            (e[0].nodeName === compareLi.nodeName ? 
             e.forEach(e => populateWith(querier('ul'))(e)) :
             e.forEach(e => populateWith(querier('div.quizzes.screen2'))(e))):
            populateWith(body)(e)));
       const cards = querierAll("div.quizz.screen2 div.img");
       activateListeners(cards);
      };
#+end_src

**** DONE Change opacity, if one is selected
CLOSED: [2021-04-20 Tue 22:11]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:11]
:END:
***** DONE Query all images in the (atomic-quizz 1).
CLOSED: [2021-04-20 Tue 22:10]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:10]
:END:
#+begin_src js
  // const cards = document.querySelectorAll("div.quizz.screen2 div.img");
 #+end_src

***** DONE Put listeners in the (selectec atomic-)quizz cards
CLOSED: [2021-04-20 Tue 22:10]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:10]
:END:
****** DONE create a function which selects all the atomic-quizzes and apply activate listeners.
CLOSED: [2021-04-20 Tue 22:09]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:09]
:END:
#+begin_src js
  let activateListeners = atomicQuizzDOM => {
      atomicQuizzDOM.forEach((card) => {
          card.addEventListener("click", selectCard);
      });
  };

  let deactivateListeners = atomicQuizzDOM => {
      atomicQuizzDOM.forEach((card) => {
          card.removeEventListener("click", selectCard);
      });
  };
#+end_src

***** DONE Function which toggles one unique element, in selected group.
CLOSED: [2021-04-20 Tue 22:10]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:10]
:END:

****** DONE Navigate through DOM elements function; add and remove Class
CLOSED: [2021-04-21 Wed 10:39]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 10:39]
:END:
#+begin_src js
  let addClass = e => c => e.classList.add(c);
  let removeClass = e => c => e.classList.remove(c);
  let lastNode = node => node.lastElementChild;
#+end_src 

****** DONE Toggle image and subtitle visibility of the card (subtitle toggle not requied)
CLOSED: [2021-04-21 Wed 10:39]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 10:39]
:END:
The condition of toggability is that the card have a header (subtitle explaining it)
#+begin_src js 
  let toggleOpacity = e => {
      if (lastNode(e) !== null) {
          addClass(e)("hidden-opacity");
          addClass(lastNode(e))("hidden-name");
          fruitBelongsToggle(e);
      }
  };

  let untoggleOpacity = e => {
      addClass(e)("card-border");
      removeClass(e)("hidden-opacity");
      removeClass(lastNode(e))("hidden-name");
      fruitBelongsUntoggle(lastNode(e));
  };
#+end_src

****** DONE Toggler logic
CLOSED: [2021-04-21 Wed 10:40]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 10:40]
:END:
        + The existence condition to the funtion to work is the existence of h2 (subtitle).
        + Add  this line, in the forEach statement, in case you want to habilitate other cards's selection: =card.classList.remove("card-border");=.
In plain English, as the function receives an element (a query selected one), it:
1. Creates an array out of it, so to operate on it.
2. Toggle opacity to every card.
3. Untoggles the selected card.
4. Deactivate the Listeners, thus locking the card selection.
5. Scroll to the next card.
#+begin_src js
  function selectCard(e) {
      const closestLi = this.closest('li').nextElementSibling;
      const children = Array.from(this.parentElement.children);
      children.forEach((card) => toggleOpacity(card));
      untoggleOpacity(this);
      console.log(this);
      console.log(closestLi);
      deactivateListeners(children);
      allSelectedP(querierAll('.card-border'))(closestLi);
  };
#+end_src

***** DONE Change text color, if selection is right or wrong
CLOSED: [2021-04-23 Fri 21:21]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-23 Fri 21:21]
:END:
#+begin_src js
  var fruitBelongsToggle = fruit =>
      (belongs(fruit)(fruitList) ?
       addClass(fruit)('right') :
       addClass(fruit)('wrong'));

  var fruitBelongsUntoggle = fruit =>
      (belongs(fruit)(fruitList) ?
       removeClass(fruit)('right') :
       removeClass(fruit)('wrong'));
#+end_src
**** DONE Check if all atomic-quizzes are selected and decide what to do next.
CLOSED: [2021-04-20 Tue 22:09]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:09]
:END:
***** DONE All atomic-quizzers selected preposition-function
CLOSED: [2021-04-20 Tue 22:07]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:07]
:END:
#+begin_src js 
  var allSelectedP = selected => nextLi => {
      var allLi = querierAll('li');
      (selected.length === allLi.length ?
       resultsLayout() :
       scrollNextElement(nextLi));
  };
#+end_src
***** DONE Scroll Next function
CLOSED: [2021-04-20 Tue 22:07]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 22:07]
:END:
#+begin_src js
  var scroll = e => e.scrollIntoView({behavior: "smooth"});

  var scrollNextElement = e => {
      let scrollNext = () => scroll(e);
      setTimeout(scrollNext, 2000);
  };
#+end_src

***** DONE Change to results-page layout function
CLOSED: [2021-04-21 Wed 13:30]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 13:30]
:END:
#+begin_src js
  var resultsLayout = () => {
      var ul = querier('ul');
      let quantityQuizzes = querierAll('.card-border').length;
      const count = whichFruits();
      var level = classify(count)(quantityQuizzes);
      var results = querierAll('div.score')[level];
      setTimeout(hiddeQuizz, 2000, ul, results);
  };
  var showHome = () => alert("TODO: toggle visibility to home layout");
#+end_src
****** DONE How many fruits belong to the right fruit bowl
CLOSED: [2021-04-22 Thu 20:30]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-22 Thu 20:30]
- State "DONE"       from "BACKLOG"    [2021-04-22 Thu 20:30]
- State "DONE"       from "BACKLOG"    [2021-04-22 Thu 20:30]
- State "DONE"       from "NEXT"       [2021-04-22 Thu 20:30]
:END:
#+begin_src js 
  var whichFruits = () => {
      let count = 0;
      let selected = querierAll('.card-border');
      selected.forEach(e => fruitBelongs(e.id)(count));
      return count;
  };

  var belongs = element => set => set.includes(element);
  var fruitBelongs = fruit => counter =>
      (belongs(fruit)(fruitList) ?
       (counter += 1) :
       "does not belong in fruitList"
      );
#+end_src
****** DONE Classify test taker
CLOSED: [2021-04-23 Fri 21:21]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-23 Fri 21:21]
:END:
#+begin_src js
  var classify = count => quantityQuizzes => {
      let result = [];
      let levels = allRanks();
      let percentageFruits = Math.round(count/quantityQuizzes * 100)/100; 
      levels.forEach((level, i) =>
          ((percentageFruits <= level)?
           (result.push(i)):
           "not this level, still"));
      console.log(result[0]);
      return result[0];
  }; 

  var allRanks = () => {
      let newList = [];
      let scores = querierAll(".score.hidde-page");
      scores.forEach(score => newList.push(score.id));
      return newList;
  }; 
#+end_src

****** DONE Toggle quizz visibility and show result's page
CLOSED: [2021-04-23 Fri 21:56]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-23 Fri 21:56]
:END:
#+begin_src js 
  let hiddeQuizz = (ul,results) => {
      var buttonRestart = querier('.buttons .restart'); 
      var buttonHome = querier('.buttons .home'); 
      addClass(ul)('hidde-page');
      hideAll();
      // removeClass(
      removeClass(results)('hidde-page');
      scroll(results);
      listen(buttonRestart)('click')(restartPage);
      listen(buttonHome)('click')(restartPage);
  };

  var hideAll = () => {
      let bodyList = Array.from(querier('body').children);
      let name = e => createElement(e).nodeName;
      bodyList.forEach(e =>
          (((e.nodeName === name('script') || e.className === 'header') ||
            (e.className === 'quizzes screen2')) ?
           ('nothing') :
           (addClass(e)('hidde-page'))
          ));
  };
#+end_src

****** DONE Reinitialize (all atomic-)quizz(es).
CLOSED: [2021-04-21 Wed 13:31]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 13:31]
:END:
#+begin_src js
  var restartPage = () => location.reload();
#+end_src

***** DONE Categorize which level the user is ranked.
CLOSED: [2021-04-23 Fri 21:09]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-23 Fri 21:09]
:END:
***** DONE Back to home-page
CLOSED: [2021-04-23 Fri 21:57]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-23 Fri 21:57]
:END:
*** HTML
+ I will use mainly the core header layout from index.html
**** Header (imports and metadata)
#+begin_src html :tangle ./code/html/screen2.html  :mkdirp yes
  <!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link rel="stylesheet" href="../css/reset.css" class="rel">
      <link rel="stylesheet" href="../css/styles.css" class="rel">
      <link href="../css/quizz.css" rel="stylesheet"/>
      <title>Taking the Quizz</title>
  </head>
#+end_src

**** Body
***** General header
#+begin_src html :tangle ./code/html/screen2.html
<body>
    <div class="header screen2">
        <p>BuzzQuizz</p>
    </div>
#+end_src
***** Foot (scripts)
#+begin_src html :tangle ./code/html/screen2.html  :mkdirp yes
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="../js/quizz-game.js"></script>
  </body>
#+end_src
***** Old hand-written hmtl (to the record)
#+begin_src html
  <div class="quizzes screen2">
    <ul>
      <li id="quizz1">
        <!-- begin first atomic-quizz -->
        <h1>Some aleatory question</h1>
        <div class="quizz screen2">

          <div class="img" id="op1">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>
          <div class="img" id="op2">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>
          <div class="img" id="op3">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>
          <div class="img" id="op4">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>

        </div>
        <!-- end first atomic-quizz -->
      </li>

      <li id="quizz2">
        <!-- begin second atomic-quizz -->
        <h1>Some aleatory question</h1>

        <div class="quizz screen2">

          <div class="img" id="op1">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>
          <div class="img" id="op2">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>
          <div class="img" id="op3">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>
          <div class="img" id="op4">
            <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
            <h2>A horse</h2>
          </div>

        </div>
        <!-- end second atomic-quizz -->
      </li>
    </ul>

    <div class="score hidde-page">
      <h1>This is your score</h1>
      <div class="quizz screen2">
        <div class="img" id="op1">
          <img alt="" src="https://i.ytimg.com/vi/4c6YlDjMCzM/hqdefault.jpg" />
        </div>
        <div class="img">
          <h2>Pellentesque id nibh tortor, id aliquet lectus proin nibh
            nisl. Ullamcorper malesuada proin libero nunc, consequat
            interdum varius sit amet, mattis vulputate enim nulla
            aliquet porttitor lacus, luctus accumsan tortor?
          </h2>
        </div>
      </div>
      <div class="buttons">
        <button class="restart">Restart Quizz</button>
        <button class="home">Return Home</button>
      </div>
    </div>
#+end_src
*** CSS
**** DONE Quizz-logo header (first requisite)
CLOSED: [2021-04-20 Tue 11:23]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 11:23]
:END:
#+begin_src css :tangle ./code/css/quizz.css  :mkdirp yes
  .quizz-logo {
      display: flex;
      justify-content: center;
      margin-top: 69px;
      height: 142px;
      width: 100%;
      background-color: rgb(0, 0, 0, 0.6);
      background-repeat: no-repeat;
      background-position: center;
      background-image: url("https://static1.srcdn.com/wordpress/wp-content/uploads/2020/05/HP-Hogwarts-Featured.jpg");
      object-fit: cover;
      opacity: 0.8;
  }

  .quizz-logo h1 {
      color: #fff;
      font-size: 3.5vh;
      text-align: center;
      margin: auto 0;
      font-weight: 400;
  }

#+end_src

**** DONE Div containing a atomic-quizz
CLOSED: [2021-04-20 Tue 12:10]
:LOGBOOK:
- Note taken on [2021-04-20 Tue 12:26] \\
  Size internal images to fit the hole header
- State "DONE"       from "NEXT"       [2021-04-20 Tue 12:10]
:END:
***** DONE Exterior divs partitions and margins
CLOSED: [2021-04-20 Tue 12:25]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 12:25]
:END:
#+begin_src css :tangle ./code/css/quizz.css
  .quizzes.screen2 {
      width: 60vw;
      display: flex;
      flex-direction: row;
      margin: 42px auto 42px auto;
      justify-content: center;
  }

  .quizz.screen2 {
      width: 90%;
      /* padding: 2px; */
      /* border: 3px solid whitesmoke; */
      /* background-color: #E5E5E5; */
      margin: 14px auto 30px auto;
      display: flex;
      flex-wrap: wrap;
      flex-direction: row;
  }

  ul {
      background-color: rgb(0, 0, 0, 0.02);
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
  }

  li {
      display: block;
      background-color: #fff;
      margin: 25px 0;
      padding-top: 40px;
  }

  li:first-of-type {
      margin-top: 2px;
  }
#+end_src

***** DONE Display of elements inside the atomic-quizz
CLOSED: [2021-04-20 Tue 12:25]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 12:25]
:END:
#+begin_src css :tangle ./code/css/quizz.css
  .quizzes.screen2 h1 {
      color: #fff;
      background-color: red;
      width: 90%;
      margin: auto;
      height: 10vh;
      font-size: 3vh;
      font-weight: 700;
      text-align: center;
      display: flex;
      flex-direction: column;
      justify-content: center;
  }

  .quizz .img {
      width: calc(50% - 25px);
      margin: 18px 0px;
  }

  .quizz .img:nth-child(odd) {
      margin-right: 50px;
  }

  .quizz .img img {
      width: 100%;
  }

  .quizz .img h2 {
      margin: 6px auto 0px 0px;
      font-weight: 700;
  }

  .score .quizz .img h2 {
      margin: 6px auto 0px 0px;
      font-size: 2vh;
      font-weight: 700;
  }
#+end_src

***** DONE Click on image effect  (Third requisite)
CLOSED: [2021-04-20 Tue 15:41]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-20 Tue 15:41]
- State "DONE"       from "BACKLOG"    [2021-04-20 Tue 12:10]
- State "DONE"       from "NEXT"       [2021-04-20 Tue 12:10]
:END:
#+begin_src css :tangle ./code/css/quizz.css
  .hidden-opacity {
      opacity: 0.5;
      transition: opacity 0.4s ease-in-out;
  }

  .hidden-name {
      opacity: 0;
      transition: opacity 0.4s ease-in-out;
  }

  .card-border {
      border: 2px solid orange;
      transition: border 0.4s ease-in-out;
  }
#+end_src

***** DONE Hidde pages
CLOSED: [2021-04-21 Wed 10:42]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 10:42]
:END:
#+begin_src css :tangle ./code/css/quizz.css
  .hidde-page {
      visibility: hidden;
  }
#+end_src

***** DONE Right/Wrong Anwser (green/red h2)
CLOSED: [2021-04-23 Fri 21:16]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-23 Fri 21:16]
:END:
#+begin_src css :tangle ./code/css/quizz.css
  .right {
      color:#7FFF00;
  }

  .wrong{
      color:#DC143C;
  }
#+end_src
***** DONE Score page
CLOSED: [2021-04-21 Wed 13:20]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2021-04-21 Wed 13:20]
:END:
#+begin_src css :tangle ./code/css/quizz.css
  .score {
      position: absolute;
      top: 50%;
  }

  .score .quizz.screen2 {
      display: flex;
      flex-wrap: wrap;
      flex-direction: row;
  }

  .buttons {
      display: flex;
      flex-direction: column;
      margin: 16px auto;
  }

  .score .buttons button {
      margin: 5px auto;
      height: 52px;
      width: 60%;
      border: 0px solid #000;
      border-radius: 5px;
      font-size: 20px;
  }

  .score .buttons button.restart {
      background-color: #EC362D;
      color: #FFF5F4;
  }

  .score .buttons button.home {
      background-color: whitesmoke;
      color: #818181;
  }
#+end_src

** Layout3
